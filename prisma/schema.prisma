// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") + "?timezone=Asia/Jakarta"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  referralCode  String?   @unique

  accounts      Account[]
  sessions      Session[]
  bookings      Booking[] // âœ… User bisa memiliki banyak Booking
}

model Booking {
  id           String  @id @default(uuid())
  userId       String? // ðŸ”¹ Optional karena bisa booking tanpa login
  name         String
  email        String
  phone        String
  whatsapp     String
  instagram    String
  bookingDate  DateTime
  bookingTime  String
  sessionType  String
  referralCode String?
  status       Status  @default(UNPAID)
  
  // âœ… Hubungan ke User (Booking bisa milik user atau tanpa user)
  user         User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt    DateTime @default(now())
}

// âœ… Model lainnya tetap sama
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// âœ… Enums untuk Role & Status
enum Role {
  USER
  ADMIN
}

enum Status {
  UNPAID
  PAID
  HALFPAID
  CANCELED
}


